// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2020 The go-netbox Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WritablePowerPort writable power port
//
// swagger:model WritablePowerPort
type WritablePowerPort struct {

	// Allocated draw
	//
	// Allocated power draw (watts)
	// Maximum: 32767
	// Minimum: 1
	AllocatedDraw *int64 `json:"allocated_draw,omitempty"`

	// cable
	Cable *NestedCable `json:"cable,omitempty"`

	// Connected endpoint
	//
	//
	// Return the appropriate serializer for the type of connected object.
	//
	// Read Only: true
	ConnectedEndpoint map[string]string `json:"connected_endpoint,omitempty"`

	// Connected endpoint type
	// Read Only: true
	ConnectedEndpointType string `json:"connected_endpoint_type,omitempty"`

	// Connection status
	// Enum: [false true]
	ConnectionStatus *bool `json:"connection_status,omitempty"`

	// Description
	// Max Length: 200
	Description string `json:"description,omitempty"`

	// Device
	// Required: true
	Device *int64 `json:"device"`

	// ID
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// Label
	//
	// Physical label
	// Max Length: 64
	Label string `json:"label,omitempty"`

	// Maximum draw
	//
	// Maximum power draw (watts)
	// Maximum: 32767
	// Minimum: 1
	MaximumDraw *int64 `json:"maximum_draw,omitempty"`

	// Name
	// Required: true
	// Max Length: 64
	// Min Length: 1
	Name *string `json:"name"`

	// tags
	Tags []*NestedTag `json:"tags,omitempty"`

	// Type
	//
	// Physical port type
	// Enum: [iec-60320-c6 iec-60320-c8 iec-60320-c14 iec-60320-c16 iec-60320-c20 iec-60309-p-n-e-4h iec-60309-p-n-e-6h iec-60309-p-n-e-9h iec-60309-2p-e-4h iec-60309-2p-e-6h iec-60309-2p-e-9h iec-60309-3p-e-4h iec-60309-3p-e-6h iec-60309-3p-e-9h iec-60309-3p-n-e-4h iec-60309-3p-n-e-6h iec-60309-3p-n-e-9h nema-1-15p nema-5-15p nema-5-20p nema-5-30p nema-5-50p nema-6-15p nema-6-20p nema-6-30p nema-6-50p nema-10-30p nema-10-50p nema-14-20p nema-14-30p nema-14-50p nema-14-60p nema-15-15p nema-15-20p nema-15-30p nema-15-50p nema-15-60p nema-l1-15p nema-l5-15p nema-l5-20p nema-l5-30p nema-l5-50p nema-l6-15p nema-l6-20p nema-l6-30p nema-l6-50p nema-l10-30p nema-l14-20p nema-l14-30p nema-l14-50p nema-l14-60p nema-l15-20p nema-l15-30p nema-l15-50p nema-l15-60p nema-l21-20p nema-l21-30p cs6361c cs6365c cs8165c cs8265c cs8365c cs8465c ita-e ita-f ita-ef ita-g ita-h ita-i ita-j ita-k ita-l ita-m ita-n ita-o]
	Type string `json:"type,omitempty"`

	// Url
	// Read Only: true
	// Format: uri
	URL strfmt.URI `json:"url,omitempty"`
}

// Validate validates this writable power port
func (m *WritablePowerPort) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllocatedDraw(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectionStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaximumDraw(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WritablePowerPort) validateAllocatedDraw(formats strfmt.Registry) error {

	if swag.IsZero(m.AllocatedDraw) { // not required
		return nil
	}

	if err := validate.MinimumInt("allocated_draw", "body", int64(*m.AllocatedDraw), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("allocated_draw", "body", int64(*m.AllocatedDraw), 32767, false); err != nil {
		return err
	}

	return nil
}

func (m *WritablePowerPort) validateCable(formats strfmt.Registry) error {

	if swag.IsZero(m.Cable) { // not required
		return nil
	}

	if m.Cable != nil {
		if err := m.Cable.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cable")
			}
			return err
		}
	}

	return nil
}

var writablePowerPortTypeConnectionStatusPropEnum []interface{}

func init() {
	var res []bool
	if err := json.Unmarshal([]byte(`[false,true]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		writablePowerPortTypeConnectionStatusPropEnum = append(writablePowerPortTypeConnectionStatusPropEnum, v)
	}
}

// prop value enum
func (m *WritablePowerPort) validateConnectionStatusEnum(path, location string, value bool) error {
	if err := validate.EnumCase(path, location, value, writablePowerPortTypeConnectionStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *WritablePowerPort) validateConnectionStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.ConnectionStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateConnectionStatusEnum("connection_status", "body", *m.ConnectionStatus); err != nil {
		return err
	}

	return nil
}

func (m *WritablePowerPort) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", string(m.Description), 200); err != nil {
		return err
	}

	return nil
}

func (m *WritablePowerPort) validateDevice(formats strfmt.Registry) error {

	if err := validate.Required("device", "body", m.Device); err != nil {
		return err
	}

	return nil
}

func (m *WritablePowerPort) validateLabel(formats strfmt.Registry) error {

	if swag.IsZero(m.Label) { // not required
		return nil
	}

	if err := validate.MaxLength("label", "body", string(m.Label), 64); err != nil {
		return err
	}

	return nil
}

func (m *WritablePowerPort) validateMaximumDraw(formats strfmt.Registry) error {

	if swag.IsZero(m.MaximumDraw) { // not required
		return nil
	}

	if err := validate.MinimumInt("maximum_draw", "body", int64(*m.MaximumDraw), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("maximum_draw", "body", int64(*m.MaximumDraw), 32767, false); err != nil {
		return err
	}

	return nil
}

func (m *WritablePowerPort) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 64); err != nil {
		return err
	}

	return nil
}

func (m *WritablePowerPort) validateTags(formats strfmt.Registry) error {

	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {
		if swag.IsZero(m.Tags[i]) { // not required
			continue
		}

		if m.Tags[i] != nil {
			if err := m.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var writablePowerPortTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["iec-60320-c6","iec-60320-c8","iec-60320-c14","iec-60320-c16","iec-60320-c20","iec-60309-p-n-e-4h","iec-60309-p-n-e-6h","iec-60309-p-n-e-9h","iec-60309-2p-e-4h","iec-60309-2p-e-6h","iec-60309-2p-e-9h","iec-60309-3p-e-4h","iec-60309-3p-e-6h","iec-60309-3p-e-9h","iec-60309-3p-n-e-4h","iec-60309-3p-n-e-6h","iec-60309-3p-n-e-9h","nema-1-15p","nema-5-15p","nema-5-20p","nema-5-30p","nema-5-50p","nema-6-15p","nema-6-20p","nema-6-30p","nema-6-50p","nema-10-30p","nema-10-50p","nema-14-20p","nema-14-30p","nema-14-50p","nema-14-60p","nema-15-15p","nema-15-20p","nema-15-30p","nema-15-50p","nema-15-60p","nema-l1-15p","nema-l5-15p","nema-l5-20p","nema-l5-30p","nema-l5-50p","nema-l6-15p","nema-l6-20p","nema-l6-30p","nema-l6-50p","nema-l10-30p","nema-l14-20p","nema-l14-30p","nema-l14-50p","nema-l14-60p","nema-l15-20p","nema-l15-30p","nema-l15-50p","nema-l15-60p","nema-l21-20p","nema-l21-30p","cs6361c","cs6365c","cs8165c","cs8265c","cs8365c","cs8465c","ita-e","ita-f","ita-ef","ita-g","ita-h","ita-i","ita-j","ita-k","ita-l","ita-m","ita-n","ita-o"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		writablePowerPortTypeTypePropEnum = append(writablePowerPortTypeTypePropEnum, v)
	}
}

const (

	// WritablePowerPortTypeIec60320C6 captures enum value "iec-60320-c6"
	WritablePowerPortTypeIec60320C6 string = "iec-60320-c6"

	// WritablePowerPortTypeIec60320C8 captures enum value "iec-60320-c8"
	WritablePowerPortTypeIec60320C8 string = "iec-60320-c8"

	// WritablePowerPortTypeIec60320C14 captures enum value "iec-60320-c14"
	WritablePowerPortTypeIec60320C14 string = "iec-60320-c14"

	// WritablePowerPortTypeIec60320C16 captures enum value "iec-60320-c16"
	WritablePowerPortTypeIec60320C16 string = "iec-60320-c16"

	// WritablePowerPortTypeIec60320C20 captures enum value "iec-60320-c20"
	WritablePowerPortTypeIec60320C20 string = "iec-60320-c20"

	// WritablePowerPortTypeIec60309pne4h captures enum value "iec-60309-p-n-e-4h"
	WritablePowerPortTypeIec60309pne4h string = "iec-60309-p-n-e-4h"

	// WritablePowerPortTypeIec60309pne6h captures enum value "iec-60309-p-n-e-6h"
	WritablePowerPortTypeIec60309pne6h string = "iec-60309-p-n-e-6h"

	// WritablePowerPortTypeIec60309pne9h captures enum value "iec-60309-p-n-e-9h"
	WritablePowerPortTypeIec60309pne9h string = "iec-60309-p-n-e-9h"

	// WritablePowerPortTypeIec603092pe4h captures enum value "iec-60309-2p-e-4h"
	WritablePowerPortTypeIec603092pe4h string = "iec-60309-2p-e-4h"

	// WritablePowerPortTypeIec603092pe6h captures enum value "iec-60309-2p-e-6h"
	WritablePowerPortTypeIec603092pe6h string = "iec-60309-2p-e-6h"

	// WritablePowerPortTypeIec603092pe9h captures enum value "iec-60309-2p-e-9h"
	WritablePowerPortTypeIec603092pe9h string = "iec-60309-2p-e-9h"

	// WritablePowerPortTypeIec603093pe4h captures enum value "iec-60309-3p-e-4h"
	WritablePowerPortTypeIec603093pe4h string = "iec-60309-3p-e-4h"

	// WritablePowerPortTypeIec603093pe6h captures enum value "iec-60309-3p-e-6h"
	WritablePowerPortTypeIec603093pe6h string = "iec-60309-3p-e-6h"

	// WritablePowerPortTypeIec603093pe9h captures enum value "iec-60309-3p-e-9h"
	WritablePowerPortTypeIec603093pe9h string = "iec-60309-3p-e-9h"

	// WritablePowerPortTypeIec603093pne4h captures enum value "iec-60309-3p-n-e-4h"
	WritablePowerPortTypeIec603093pne4h string = "iec-60309-3p-n-e-4h"

	// WritablePowerPortTypeIec603093pne6h captures enum value "iec-60309-3p-n-e-6h"
	WritablePowerPortTypeIec603093pne6h string = "iec-60309-3p-n-e-6h"

	// WritablePowerPortTypeIec603093pne9h captures enum value "iec-60309-3p-n-e-9h"
	WritablePowerPortTypeIec603093pne9h string = "iec-60309-3p-n-e-9h"

	// WritablePowerPortTypeNema115p captures enum value "nema-1-15p"
	WritablePowerPortTypeNema115p string = "nema-1-15p"

	// WritablePowerPortTypeNema515p captures enum value "nema-5-15p"
	WritablePowerPortTypeNema515p string = "nema-5-15p"

	// WritablePowerPortTypeNema520p captures enum value "nema-5-20p"
	WritablePowerPortTypeNema520p string = "nema-5-20p"

	// WritablePowerPortTypeNema530p captures enum value "nema-5-30p"
	WritablePowerPortTypeNema530p string = "nema-5-30p"

	// WritablePowerPortTypeNema550p captures enum value "nema-5-50p"
	WritablePowerPortTypeNema550p string = "nema-5-50p"

	// WritablePowerPortTypeNema615p captures enum value "nema-6-15p"
	WritablePowerPortTypeNema615p string = "nema-6-15p"

	// WritablePowerPortTypeNema620p captures enum value "nema-6-20p"
	WritablePowerPortTypeNema620p string = "nema-6-20p"

	// WritablePowerPortTypeNema630p captures enum value "nema-6-30p"
	WritablePowerPortTypeNema630p string = "nema-6-30p"

	// WritablePowerPortTypeNema650p captures enum value "nema-6-50p"
	WritablePowerPortTypeNema650p string = "nema-6-50p"

	// WritablePowerPortTypeNema1030p captures enum value "nema-10-30p"
	WritablePowerPortTypeNema1030p string = "nema-10-30p"

	// WritablePowerPortTypeNema1050p captures enum value "nema-10-50p"
	WritablePowerPortTypeNema1050p string = "nema-10-50p"

	// WritablePowerPortTypeNema1420p captures enum value "nema-14-20p"
	WritablePowerPortTypeNema1420p string = "nema-14-20p"

	// WritablePowerPortTypeNema1430p captures enum value "nema-14-30p"
	WritablePowerPortTypeNema1430p string = "nema-14-30p"

	// WritablePowerPortTypeNema1450p captures enum value "nema-14-50p"
	WritablePowerPortTypeNema1450p string = "nema-14-50p"

	// WritablePowerPortTypeNema1460p captures enum value "nema-14-60p"
	WritablePowerPortTypeNema1460p string = "nema-14-60p"

	// WritablePowerPortTypeNema1515p captures enum value "nema-15-15p"
	WritablePowerPortTypeNema1515p string = "nema-15-15p"

	// WritablePowerPortTypeNema1520p captures enum value "nema-15-20p"
	WritablePowerPortTypeNema1520p string = "nema-15-20p"

	// WritablePowerPortTypeNema1530p captures enum value "nema-15-30p"
	WritablePowerPortTypeNema1530p string = "nema-15-30p"

	// WritablePowerPortTypeNema1550p captures enum value "nema-15-50p"
	WritablePowerPortTypeNema1550p string = "nema-15-50p"

	// WritablePowerPortTypeNema1560p captures enum value "nema-15-60p"
	WritablePowerPortTypeNema1560p string = "nema-15-60p"

	// WritablePowerPortTypeNemaL115p captures enum value "nema-l1-15p"
	WritablePowerPortTypeNemaL115p string = "nema-l1-15p"

	// WritablePowerPortTypeNemaL515p captures enum value "nema-l5-15p"
	WritablePowerPortTypeNemaL515p string = "nema-l5-15p"

	// WritablePowerPortTypeNemaL520p captures enum value "nema-l5-20p"
	WritablePowerPortTypeNemaL520p string = "nema-l5-20p"

	// WritablePowerPortTypeNemaL530p captures enum value "nema-l5-30p"
	WritablePowerPortTypeNemaL530p string = "nema-l5-30p"

	// WritablePowerPortTypeNemaL550p captures enum value "nema-l5-50p"
	WritablePowerPortTypeNemaL550p string = "nema-l5-50p"

	// WritablePowerPortTypeNemaL615p captures enum value "nema-l6-15p"
	WritablePowerPortTypeNemaL615p string = "nema-l6-15p"

	// WritablePowerPortTypeNemaL620p captures enum value "nema-l6-20p"
	WritablePowerPortTypeNemaL620p string = "nema-l6-20p"

	// WritablePowerPortTypeNemaL630p captures enum value "nema-l6-30p"
	WritablePowerPortTypeNemaL630p string = "nema-l6-30p"

	// WritablePowerPortTypeNemaL650p captures enum value "nema-l6-50p"
	WritablePowerPortTypeNemaL650p string = "nema-l6-50p"

	// WritablePowerPortTypeNemaL1030p captures enum value "nema-l10-30p"
	WritablePowerPortTypeNemaL1030p string = "nema-l10-30p"

	// WritablePowerPortTypeNemaL1420p captures enum value "nema-l14-20p"
	WritablePowerPortTypeNemaL1420p string = "nema-l14-20p"

	// WritablePowerPortTypeNemaL1430p captures enum value "nema-l14-30p"
	WritablePowerPortTypeNemaL1430p string = "nema-l14-30p"

	// WritablePowerPortTypeNemaL1450p captures enum value "nema-l14-50p"
	WritablePowerPortTypeNemaL1450p string = "nema-l14-50p"

	// WritablePowerPortTypeNemaL1460p captures enum value "nema-l14-60p"
	WritablePowerPortTypeNemaL1460p string = "nema-l14-60p"

	// WritablePowerPortTypeNemaL1520p captures enum value "nema-l15-20p"
	WritablePowerPortTypeNemaL1520p string = "nema-l15-20p"

	// WritablePowerPortTypeNemaL1530p captures enum value "nema-l15-30p"
	WritablePowerPortTypeNemaL1530p string = "nema-l15-30p"

	// WritablePowerPortTypeNemaL1550p captures enum value "nema-l15-50p"
	WritablePowerPortTypeNemaL1550p string = "nema-l15-50p"

	// WritablePowerPortTypeNemaL1560p captures enum value "nema-l15-60p"
	WritablePowerPortTypeNemaL1560p string = "nema-l15-60p"

	// WritablePowerPortTypeNemaL2120p captures enum value "nema-l21-20p"
	WritablePowerPortTypeNemaL2120p string = "nema-l21-20p"

	// WritablePowerPortTypeNemaL2130p captures enum value "nema-l21-30p"
	WritablePowerPortTypeNemaL2130p string = "nema-l21-30p"

	// WritablePowerPortTypeCs6361c captures enum value "cs6361c"
	WritablePowerPortTypeCs6361c string = "cs6361c"

	// WritablePowerPortTypeCs6365c captures enum value "cs6365c"
	WritablePowerPortTypeCs6365c string = "cs6365c"

	// WritablePowerPortTypeCs8165c captures enum value "cs8165c"
	WritablePowerPortTypeCs8165c string = "cs8165c"

	// WritablePowerPortTypeCs8265c captures enum value "cs8265c"
	WritablePowerPortTypeCs8265c string = "cs8265c"

	// WritablePowerPortTypeCs8365c captures enum value "cs8365c"
	WritablePowerPortTypeCs8365c string = "cs8365c"

	// WritablePowerPortTypeCs8465c captures enum value "cs8465c"
	WritablePowerPortTypeCs8465c string = "cs8465c"

	// WritablePowerPortTypeItae captures enum value "ita-e"
	WritablePowerPortTypeItae string = "ita-e"

	// WritablePowerPortTypeItaf captures enum value "ita-f"
	WritablePowerPortTypeItaf string = "ita-f"

	// WritablePowerPortTypeItaEf captures enum value "ita-ef"
	WritablePowerPortTypeItaEf string = "ita-ef"

	// WritablePowerPortTypeItag captures enum value "ita-g"
	WritablePowerPortTypeItag string = "ita-g"

	// WritablePowerPortTypeItah captures enum value "ita-h"
	WritablePowerPortTypeItah string = "ita-h"

	// WritablePowerPortTypeItai captures enum value "ita-i"
	WritablePowerPortTypeItai string = "ita-i"

	// WritablePowerPortTypeItaj captures enum value "ita-j"
	WritablePowerPortTypeItaj string = "ita-j"

	// WritablePowerPortTypeItak captures enum value "ita-k"
	WritablePowerPortTypeItak string = "ita-k"

	// WritablePowerPortTypeItal captures enum value "ita-l"
	WritablePowerPortTypeItal string = "ita-l"

	// WritablePowerPortTypeItam captures enum value "ita-m"
	WritablePowerPortTypeItam string = "ita-m"

	// WritablePowerPortTypeItan captures enum value "ita-n"
	WritablePowerPortTypeItan string = "ita-n"

	// WritablePowerPortTypeItao captures enum value "ita-o"
	WritablePowerPortTypeItao string = "ita-o"
)

// prop value enum
func (m *WritablePowerPort) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, writablePowerPortTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *WritablePowerPort) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *WritablePowerPort) validateURL(formats strfmt.Registry) error {

	if swag.IsZero(m.URL) { // not required
		return nil
	}

	if err := validate.FormatOf("url", "body", "uri", m.URL.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WritablePowerPort) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WritablePowerPort) UnmarshalBinary(b []byte) error {
	var res WritablePowerPort
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
