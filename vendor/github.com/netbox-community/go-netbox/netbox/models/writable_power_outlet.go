// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2020 The go-netbox Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WritablePowerOutlet writable power outlet
//
// swagger:model WritablePowerOutlet
type WritablePowerOutlet struct {

	// cable
	Cable *NestedCable `json:"cable,omitempty"`

	// Connected endpoint
	//
	//
	// Return the appropriate serializer for the type of connected object.
	//
	// Read Only: true
	ConnectedEndpoint map[string]string `json:"connected_endpoint,omitempty"`

	// Connected endpoint type
	// Read Only: true
	ConnectedEndpointType string `json:"connected_endpoint_type,omitempty"`

	// Connection status
	// Enum: [false true]
	ConnectionStatus *bool `json:"connection_status,omitempty"`

	// Description
	// Max Length: 200
	Description string `json:"description,omitempty"`

	// Device
	// Required: true
	Device *int64 `json:"device"`

	// Feed leg
	//
	// Phase (for three-phase feeds)
	// Enum: [A B C]
	FeedLeg string `json:"feed_leg,omitempty"`

	// ID
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// Label
	//
	// Physical label
	// Max Length: 64
	Label string `json:"label,omitempty"`

	// Name
	// Required: true
	// Max Length: 64
	// Min Length: 1
	Name *string `json:"name"`

	// Power port
	PowerPort *int64 `json:"power_port,omitempty"`

	// tags
	Tags []*NestedTag `json:"tags,omitempty"`

	// Type
	//
	// Physical port type
	// Enum: [iec-60320-c5 iec-60320-c7 iec-60320-c13 iec-60320-c15 iec-60320-c19 iec-60309-p-n-e-4h iec-60309-p-n-e-6h iec-60309-p-n-e-9h iec-60309-2p-e-4h iec-60309-2p-e-6h iec-60309-2p-e-9h iec-60309-3p-e-4h iec-60309-3p-e-6h iec-60309-3p-e-9h iec-60309-3p-n-e-4h iec-60309-3p-n-e-6h iec-60309-3p-n-e-9h nema-1-15r nema-5-15r nema-5-20r nema-5-30r nema-5-50r nema-6-15r nema-6-20r nema-6-30r nema-6-50r nema-10-30r nema-10-50r nema-14-20r nema-14-30r nema-14-50r nema-14-60r nema-15-15r nema-15-20r nema-15-30r nema-15-50r nema-15-60r nema-l1-15r nema-l5-15r nema-l5-20r nema-l5-30r nema-l5-50r nema-l6-15r nema-l6-20r nema-l6-30r nema-l6-50r nema-l10-30r nema-l14-20r nema-l14-30r nema-l14-50r nema-l14-60r nema-l15-20r nema-l15-30r nema-l15-50r nema-l15-60r nema-l21-20r nema-l21-30r CS6360C CS6364C CS8164C CS8264C CS8364C CS8464C ita-e ita-f ita-g ita-h ita-i ita-j ita-k ita-l ita-m ita-n ita-o hdot-cx]
	Type string `json:"type,omitempty"`

	// Url
	// Read Only: true
	// Format: uri
	URL strfmt.URI `json:"url,omitempty"`
}

// Validate validates this writable power outlet
func (m *WritablePowerOutlet) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectionStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeedLeg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WritablePowerOutlet) validateCable(formats strfmt.Registry) error {

	if swag.IsZero(m.Cable) { // not required
		return nil
	}

	if m.Cable != nil {
		if err := m.Cable.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cable")
			}
			return err
		}
	}

	return nil
}

var writablePowerOutletTypeConnectionStatusPropEnum []interface{}

func init() {
	var res []bool
	if err := json.Unmarshal([]byte(`[false,true]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		writablePowerOutletTypeConnectionStatusPropEnum = append(writablePowerOutletTypeConnectionStatusPropEnum, v)
	}
}

// prop value enum
func (m *WritablePowerOutlet) validateConnectionStatusEnum(path, location string, value bool) error {
	if err := validate.EnumCase(path, location, value, writablePowerOutletTypeConnectionStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *WritablePowerOutlet) validateConnectionStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.ConnectionStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateConnectionStatusEnum("connection_status", "body", *m.ConnectionStatus); err != nil {
		return err
	}

	return nil
}

func (m *WritablePowerOutlet) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", string(m.Description), 200); err != nil {
		return err
	}

	return nil
}

func (m *WritablePowerOutlet) validateDevice(formats strfmt.Registry) error {

	if err := validate.Required("device", "body", m.Device); err != nil {
		return err
	}

	return nil
}

var writablePowerOutletTypeFeedLegPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["A","B","C"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		writablePowerOutletTypeFeedLegPropEnum = append(writablePowerOutletTypeFeedLegPropEnum, v)
	}
}

const (

	// WritablePowerOutletFeedLegA captures enum value "A"
	WritablePowerOutletFeedLegA string = "A"

	// WritablePowerOutletFeedLegB captures enum value "B"
	WritablePowerOutletFeedLegB string = "B"

	// WritablePowerOutletFeedLegC captures enum value "C"
	WritablePowerOutletFeedLegC string = "C"
)

// prop value enum
func (m *WritablePowerOutlet) validateFeedLegEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, writablePowerOutletTypeFeedLegPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *WritablePowerOutlet) validateFeedLeg(formats strfmt.Registry) error {

	if swag.IsZero(m.FeedLeg) { // not required
		return nil
	}

	// value enum
	if err := m.validateFeedLegEnum("feed_leg", "body", m.FeedLeg); err != nil {
		return err
	}

	return nil
}

func (m *WritablePowerOutlet) validateLabel(formats strfmt.Registry) error {

	if swag.IsZero(m.Label) { // not required
		return nil
	}

	if err := validate.MaxLength("label", "body", string(m.Label), 64); err != nil {
		return err
	}

	return nil
}

func (m *WritablePowerOutlet) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 64); err != nil {
		return err
	}

	return nil
}

func (m *WritablePowerOutlet) validateTags(formats strfmt.Registry) error {

	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {
		if swag.IsZero(m.Tags[i]) { // not required
			continue
		}

		if m.Tags[i] != nil {
			if err := m.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var writablePowerOutletTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["iec-60320-c5","iec-60320-c7","iec-60320-c13","iec-60320-c15","iec-60320-c19","iec-60309-p-n-e-4h","iec-60309-p-n-e-6h","iec-60309-p-n-e-9h","iec-60309-2p-e-4h","iec-60309-2p-e-6h","iec-60309-2p-e-9h","iec-60309-3p-e-4h","iec-60309-3p-e-6h","iec-60309-3p-e-9h","iec-60309-3p-n-e-4h","iec-60309-3p-n-e-6h","iec-60309-3p-n-e-9h","nema-1-15r","nema-5-15r","nema-5-20r","nema-5-30r","nema-5-50r","nema-6-15r","nema-6-20r","nema-6-30r","nema-6-50r","nema-10-30r","nema-10-50r","nema-14-20r","nema-14-30r","nema-14-50r","nema-14-60r","nema-15-15r","nema-15-20r","nema-15-30r","nema-15-50r","nema-15-60r","nema-l1-15r","nema-l5-15r","nema-l5-20r","nema-l5-30r","nema-l5-50r","nema-l6-15r","nema-l6-20r","nema-l6-30r","nema-l6-50r","nema-l10-30r","nema-l14-20r","nema-l14-30r","nema-l14-50r","nema-l14-60r","nema-l15-20r","nema-l15-30r","nema-l15-50r","nema-l15-60r","nema-l21-20r","nema-l21-30r","CS6360C","CS6364C","CS8164C","CS8264C","CS8364C","CS8464C","ita-e","ita-f","ita-g","ita-h","ita-i","ita-j","ita-k","ita-l","ita-m","ita-n","ita-o","hdot-cx"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		writablePowerOutletTypeTypePropEnum = append(writablePowerOutletTypeTypePropEnum, v)
	}
}

const (

	// WritablePowerOutletTypeIec60320C5 captures enum value "iec-60320-c5"
	WritablePowerOutletTypeIec60320C5 string = "iec-60320-c5"

	// WritablePowerOutletTypeIec60320C7 captures enum value "iec-60320-c7"
	WritablePowerOutletTypeIec60320C7 string = "iec-60320-c7"

	// WritablePowerOutletTypeIec60320C13 captures enum value "iec-60320-c13"
	WritablePowerOutletTypeIec60320C13 string = "iec-60320-c13"

	// WritablePowerOutletTypeIec60320C15 captures enum value "iec-60320-c15"
	WritablePowerOutletTypeIec60320C15 string = "iec-60320-c15"

	// WritablePowerOutletTypeIec60320C19 captures enum value "iec-60320-c19"
	WritablePowerOutletTypeIec60320C19 string = "iec-60320-c19"

	// WritablePowerOutletTypeIec60309pne4h captures enum value "iec-60309-p-n-e-4h"
	WritablePowerOutletTypeIec60309pne4h string = "iec-60309-p-n-e-4h"

	// WritablePowerOutletTypeIec60309pne6h captures enum value "iec-60309-p-n-e-6h"
	WritablePowerOutletTypeIec60309pne6h string = "iec-60309-p-n-e-6h"

	// WritablePowerOutletTypeIec60309pne9h captures enum value "iec-60309-p-n-e-9h"
	WritablePowerOutletTypeIec60309pne9h string = "iec-60309-p-n-e-9h"

	// WritablePowerOutletTypeIec603092pe4h captures enum value "iec-60309-2p-e-4h"
	WritablePowerOutletTypeIec603092pe4h string = "iec-60309-2p-e-4h"

	// WritablePowerOutletTypeIec603092pe6h captures enum value "iec-60309-2p-e-6h"
	WritablePowerOutletTypeIec603092pe6h string = "iec-60309-2p-e-6h"

	// WritablePowerOutletTypeIec603092pe9h captures enum value "iec-60309-2p-e-9h"
	WritablePowerOutletTypeIec603092pe9h string = "iec-60309-2p-e-9h"

	// WritablePowerOutletTypeIec603093pe4h captures enum value "iec-60309-3p-e-4h"
	WritablePowerOutletTypeIec603093pe4h string = "iec-60309-3p-e-4h"

	// WritablePowerOutletTypeIec603093pe6h captures enum value "iec-60309-3p-e-6h"
	WritablePowerOutletTypeIec603093pe6h string = "iec-60309-3p-e-6h"

	// WritablePowerOutletTypeIec603093pe9h captures enum value "iec-60309-3p-e-9h"
	WritablePowerOutletTypeIec603093pe9h string = "iec-60309-3p-e-9h"

	// WritablePowerOutletTypeIec603093pne4h captures enum value "iec-60309-3p-n-e-4h"
	WritablePowerOutletTypeIec603093pne4h string = "iec-60309-3p-n-e-4h"

	// WritablePowerOutletTypeIec603093pne6h captures enum value "iec-60309-3p-n-e-6h"
	WritablePowerOutletTypeIec603093pne6h string = "iec-60309-3p-n-e-6h"

	// WritablePowerOutletTypeIec603093pne9h captures enum value "iec-60309-3p-n-e-9h"
	WritablePowerOutletTypeIec603093pne9h string = "iec-60309-3p-n-e-9h"

	// WritablePowerOutletTypeNema115r captures enum value "nema-1-15r"
	WritablePowerOutletTypeNema115r string = "nema-1-15r"

	// WritablePowerOutletTypeNema515r captures enum value "nema-5-15r"
	WritablePowerOutletTypeNema515r string = "nema-5-15r"

	// WritablePowerOutletTypeNema520r captures enum value "nema-5-20r"
	WritablePowerOutletTypeNema520r string = "nema-5-20r"

	// WritablePowerOutletTypeNema530r captures enum value "nema-5-30r"
	WritablePowerOutletTypeNema530r string = "nema-5-30r"

	// WritablePowerOutletTypeNema550r captures enum value "nema-5-50r"
	WritablePowerOutletTypeNema550r string = "nema-5-50r"

	// WritablePowerOutletTypeNema615r captures enum value "nema-6-15r"
	WritablePowerOutletTypeNema615r string = "nema-6-15r"

	// WritablePowerOutletTypeNema620r captures enum value "nema-6-20r"
	WritablePowerOutletTypeNema620r string = "nema-6-20r"

	// WritablePowerOutletTypeNema630r captures enum value "nema-6-30r"
	WritablePowerOutletTypeNema630r string = "nema-6-30r"

	// WritablePowerOutletTypeNema650r captures enum value "nema-6-50r"
	WritablePowerOutletTypeNema650r string = "nema-6-50r"

	// WritablePowerOutletTypeNema1030r captures enum value "nema-10-30r"
	WritablePowerOutletTypeNema1030r string = "nema-10-30r"

	// WritablePowerOutletTypeNema1050r captures enum value "nema-10-50r"
	WritablePowerOutletTypeNema1050r string = "nema-10-50r"

	// WritablePowerOutletTypeNema1420r captures enum value "nema-14-20r"
	WritablePowerOutletTypeNema1420r string = "nema-14-20r"

	// WritablePowerOutletTypeNema1430r captures enum value "nema-14-30r"
	WritablePowerOutletTypeNema1430r string = "nema-14-30r"

	// WritablePowerOutletTypeNema1450r captures enum value "nema-14-50r"
	WritablePowerOutletTypeNema1450r string = "nema-14-50r"

	// WritablePowerOutletTypeNema1460r captures enum value "nema-14-60r"
	WritablePowerOutletTypeNema1460r string = "nema-14-60r"

	// WritablePowerOutletTypeNema1515r captures enum value "nema-15-15r"
	WritablePowerOutletTypeNema1515r string = "nema-15-15r"

	// WritablePowerOutletTypeNema1520r captures enum value "nema-15-20r"
	WritablePowerOutletTypeNema1520r string = "nema-15-20r"

	// WritablePowerOutletTypeNema1530r captures enum value "nema-15-30r"
	WritablePowerOutletTypeNema1530r string = "nema-15-30r"

	// WritablePowerOutletTypeNema1550r captures enum value "nema-15-50r"
	WritablePowerOutletTypeNema1550r string = "nema-15-50r"

	// WritablePowerOutletTypeNema1560r captures enum value "nema-15-60r"
	WritablePowerOutletTypeNema1560r string = "nema-15-60r"

	// WritablePowerOutletTypeNemaL115r captures enum value "nema-l1-15r"
	WritablePowerOutletTypeNemaL115r string = "nema-l1-15r"

	// WritablePowerOutletTypeNemaL515r captures enum value "nema-l5-15r"
	WritablePowerOutletTypeNemaL515r string = "nema-l5-15r"

	// WritablePowerOutletTypeNemaL520r captures enum value "nema-l5-20r"
	WritablePowerOutletTypeNemaL520r string = "nema-l5-20r"

	// WritablePowerOutletTypeNemaL530r captures enum value "nema-l5-30r"
	WritablePowerOutletTypeNemaL530r string = "nema-l5-30r"

	// WritablePowerOutletTypeNemaL550r captures enum value "nema-l5-50r"
	WritablePowerOutletTypeNemaL550r string = "nema-l5-50r"

	// WritablePowerOutletTypeNemaL615r captures enum value "nema-l6-15r"
	WritablePowerOutletTypeNemaL615r string = "nema-l6-15r"

	// WritablePowerOutletTypeNemaL620r captures enum value "nema-l6-20r"
	WritablePowerOutletTypeNemaL620r string = "nema-l6-20r"

	// WritablePowerOutletTypeNemaL630r captures enum value "nema-l6-30r"
	WritablePowerOutletTypeNemaL630r string = "nema-l6-30r"

	// WritablePowerOutletTypeNemaL650r captures enum value "nema-l6-50r"
	WritablePowerOutletTypeNemaL650r string = "nema-l6-50r"

	// WritablePowerOutletTypeNemaL1030r captures enum value "nema-l10-30r"
	WritablePowerOutletTypeNemaL1030r string = "nema-l10-30r"

	// WritablePowerOutletTypeNemaL1420r captures enum value "nema-l14-20r"
	WritablePowerOutletTypeNemaL1420r string = "nema-l14-20r"

	// WritablePowerOutletTypeNemaL1430r captures enum value "nema-l14-30r"
	WritablePowerOutletTypeNemaL1430r string = "nema-l14-30r"

	// WritablePowerOutletTypeNemaL1450r captures enum value "nema-l14-50r"
	WritablePowerOutletTypeNemaL1450r string = "nema-l14-50r"

	// WritablePowerOutletTypeNemaL1460r captures enum value "nema-l14-60r"
	WritablePowerOutletTypeNemaL1460r string = "nema-l14-60r"

	// WritablePowerOutletTypeNemaL1520r captures enum value "nema-l15-20r"
	WritablePowerOutletTypeNemaL1520r string = "nema-l15-20r"

	// WritablePowerOutletTypeNemaL1530r captures enum value "nema-l15-30r"
	WritablePowerOutletTypeNemaL1530r string = "nema-l15-30r"

	// WritablePowerOutletTypeNemaL1550r captures enum value "nema-l15-50r"
	WritablePowerOutletTypeNemaL1550r string = "nema-l15-50r"

	// WritablePowerOutletTypeNemaL1560r captures enum value "nema-l15-60r"
	WritablePowerOutletTypeNemaL1560r string = "nema-l15-60r"

	// WritablePowerOutletTypeNemaL2120r captures enum value "nema-l21-20r"
	WritablePowerOutletTypeNemaL2120r string = "nema-l21-20r"

	// WritablePowerOutletTypeNemaL2130r captures enum value "nema-l21-30r"
	WritablePowerOutletTypeNemaL2130r string = "nema-l21-30r"

	// WritablePowerOutletTypeCS6360C captures enum value "CS6360C"
	WritablePowerOutletTypeCS6360C string = "CS6360C"

	// WritablePowerOutletTypeCS6364C captures enum value "CS6364C"
	WritablePowerOutletTypeCS6364C string = "CS6364C"

	// WritablePowerOutletTypeCS8164C captures enum value "CS8164C"
	WritablePowerOutletTypeCS8164C string = "CS8164C"

	// WritablePowerOutletTypeCS8264C captures enum value "CS8264C"
	WritablePowerOutletTypeCS8264C string = "CS8264C"

	// WritablePowerOutletTypeCS8364C captures enum value "CS8364C"
	WritablePowerOutletTypeCS8364C string = "CS8364C"

	// WritablePowerOutletTypeCS8464C captures enum value "CS8464C"
	WritablePowerOutletTypeCS8464C string = "CS8464C"

	// WritablePowerOutletTypeItae captures enum value "ita-e"
	WritablePowerOutletTypeItae string = "ita-e"

	// WritablePowerOutletTypeItaf captures enum value "ita-f"
	WritablePowerOutletTypeItaf string = "ita-f"

	// WritablePowerOutletTypeItag captures enum value "ita-g"
	WritablePowerOutletTypeItag string = "ita-g"

	// WritablePowerOutletTypeItah captures enum value "ita-h"
	WritablePowerOutletTypeItah string = "ita-h"

	// WritablePowerOutletTypeItai captures enum value "ita-i"
	WritablePowerOutletTypeItai string = "ita-i"

	// WritablePowerOutletTypeItaj captures enum value "ita-j"
	WritablePowerOutletTypeItaj string = "ita-j"

	// WritablePowerOutletTypeItak captures enum value "ita-k"
	WritablePowerOutletTypeItak string = "ita-k"

	// WritablePowerOutletTypeItal captures enum value "ita-l"
	WritablePowerOutletTypeItal string = "ita-l"

	// WritablePowerOutletTypeItam captures enum value "ita-m"
	WritablePowerOutletTypeItam string = "ita-m"

	// WritablePowerOutletTypeItan captures enum value "ita-n"
	WritablePowerOutletTypeItan string = "ita-n"

	// WritablePowerOutletTypeItao captures enum value "ita-o"
	WritablePowerOutletTypeItao string = "ita-o"

	// WritablePowerOutletTypeHdotCx captures enum value "hdot-cx"
	WritablePowerOutletTypeHdotCx string = "hdot-cx"
)

// prop value enum
func (m *WritablePowerOutlet) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, writablePowerOutletTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *WritablePowerOutlet) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *WritablePowerOutlet) validateURL(formats strfmt.Registry) error {

	if swag.IsZero(m.URL) { // not required
		return nil
	}

	if err := validate.FormatOf("url", "body", "uri", m.URL.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WritablePowerOutlet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WritablePowerOutlet) UnmarshalBinary(b []byte) error {
	var res WritablePowerOutlet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
